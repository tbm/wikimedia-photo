#!/usr/bin/env python3

"""
Upload photos to Wikimedia Commons
"""

import configparser
import datetime
import json
import pathlib
import random
import string
import time

from exif import Image
import pywikibot
from pywikibot.specialbots import UploadRobot


def get_filename(config):
    """
    Get filename from config file
    """

    filename = config.get("filename", "unknown")
    if not filename.endswith(".jpg"):
        filename += ".jpg"
    filename = filename.replace(" ", "_")
    return filename


def add_exif(jpg, new_name, config):
    """
    Add metainfo to EXIF
    """

    with open(jpg.name, "rb") as image_file:
        in_image = Image(image_file)
    in_image.image_description = config["desc-en"]
    in_image.artist = config["author"]
    in_image.copyright = "This work is licensed under the Creative Commons Attribution ShareAlike 4.0 International License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042 USA."
    with open(new_name, "wb") as new_image_file:
        new_image_file.write(in_image.get_file())
    return in_image


def format_category(cat):
    """
    Format a category
    """

    cat = cat.replace("_", " ")
    if cat.startswith("[[Category:"):
        return cat
    if cat.startswith("Category:"):
        return "[[" + cat + "]]"
    return "[[Category:" + cat + "]]"


def format_gps(gps_degree, gps_min, gps_sec):
    """
    Format GPS coordinates
    """

    gps = gps_degree + gps_min / 60 + gps_sec / 3600
    return f"{gps:.6f}"


def get_info(config, exif_info):
    """
    Gather information about a photo
    """

    if "author_username" in config:
        config[
            "author_link"
        ] = f'[[User:{config["author_username"]}|{config["author"]}]]'
    else:
        config["author_link"] = config["author"]
    config["desc"] = f'  {{{{en|{config["desc-en"]}}}}}'
    categories = [format_category(cat) for cat in config["category"].split("\n")]
    config["categories"] = "\n".join(categories)
    image_date = datetime.datetime.strptime(
        exif_info.datetime_original, "%Y:%m:%d %H:%M:%S"
    )
    config["image_date"] = str(image_date)
    config["inception"] = "+" + image_date.date().isoformat() + "T00:00:00Z"
    config["lat"] = format_gps(*exif_info.gps_latitude)
    config["long"] = format_gps(*exif_info.gps_longitude)
    config["model"] = exif_info.model
    return config


def get_author_url(user):
    """
    Get URL for Wikimedia Commons user
    """

    user = user.replace(" ", "_")
    return f"https://commons.wikimedia.org/wiki/user:{user}"


def page_name(filename):
    """
    Return page name for filename
    """

    return f"File:{filename}"


def upload(site, filename, meta):
    """
    Upload file to site using UploadRobot
    """

    template = """=={{int:filedesc}}==
{{Information
|description=
  $desc
|date=$image_date
|source={{own}}
|author=$author_link
}}
{{Location|$lat|$long}}

=={{int:license-header}}==
{{$license}}

$categories
"""
    description = string.Template(template).substitute(meta)
    summary = "Add photo"
    bot = UploadRobot(
        filename,
        description=description,
        summary=summary,
        keep_filename=True,
        target_site=site,
    )
    bot.run()


def add_structured_data(site, filename, meta):
    """
    Add structured data to Wikimedia page
    """

    page = pywikibot.Page(site, title=page_name(filename), ns=6)
    media_identifier = "M{}".format(page.pageid)

    data = {
        "claims": [
            # Creator
            {
                "mainsnak": {
                    "property": "P170",
                    "snaktype": "somevalue",
                },
                "qualifiers": {
                    "P3831": [
                        {
                            "datavalue": {
                                "type": "wikibase-entityid",
                                "value": {
                                    "entity-type": "item",
                                    "id": "Q33231",
                                    "numeric-id": 33231,
                                },
                            },
                            "property": "P3831",
                            "snaktype": "value",
                        }
                    ],
                    "P2093": [
                        {
                            "datavalue": {
                                "type": "string",
                                "value": meta["author"],
                            },
                            "property": "P2093",
                            "snaktype": "value",
                        }
                    ],
                    "P4174": [
                        {
                            "datavalue": {
                                "type": "string",
                                "value": meta["author_username"],
                            },
                            "property": "P4174",
                            "snaktype": "value",
                        }
                    ],
                    "P2699": [
                        {
                            "datavalue": {
                                "type": "string",
                                "value": get_author_url(meta["author_username"]),
                            },
                            "property": "P2699",
                            "snaktype": "value",
                        }
                    ],
                },
                "rank": "normal",
                "type": "statement",
            },
            # Copyright license
            # Q18199165 = CC-BY-SA-4.0
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "wikibase-entityid",
                        "value": {
                            "entity-type": "item",
                            "id": "Q18199165",
                            "numeric-id": 18199165,
                        },
                    },
                    "property": "P275",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
            # Copyright status
            # Q50423863 = copyrighted
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "wikibase-entityid",
                        "value": {
                            "entity-type": "item",
                            "id": "Q50423863",
                            "numeric-id": 50423863,
                        },
                    },
                    "property": "P6216",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
            # Source of file
            # Original creation by uploader
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "wikibase-entityid",
                        "value": {
                            "entity-type": "item",
                            "id": "Q66458942",
                            "numeric-id": 66458942,
                        },
                    },
                    "property": "P7482",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
            # Image captured with
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "wikibase-entityid",
                        "value": {
                            "entity-type": "item",
                            "id": "Q64015157",
                            "numeric-id": 64015157,
                        },
                    },
                    "property": "P4082",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
            # GPS coordinates
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "globecoordinate",
                        "value": {
                            "globe": "http://www.wikidata.org/entity/Q2",
                            "latitude": float(meta["lat"]),
                            "longitude": float(meta["long"]),
                            "precision": 1e-06,
                        },
                    },
                    "property": "P1259",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
            # Inception
            {
                "mainsnak": {
                    "datavalue": {
                        "type": "time",
                        "value": {
                            "after": 0,
                            "before": 0,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727",
                            "precision": 11,
                            "time": meta["inception"],
                            "timezone": 0,
                        },
                    },
                    "property": "P571",
                    "snaktype": "value",
                },
                "rank": "normal",
                "type": "statement",
            },
        ],
        "labels": {
            "en": {
                "language": "en",
                "value": meta["desc-en"],
            },
        },
    }

    csrf_token = site.tokens["csrf"]
    payload = {
        "action": "wbeditentity",
        "format": "json",
        "id": media_identifier,
        "data": json.dumps(data, separators=(",", ":")),
        "token": csrf_token,
        "summary": "Add structured data",
        "bot": False,
    }

    request = site._simple_request(**payload)
    try:
        request.submit()
    except pywikibot.data.api.APIError as error:
        print("Got an error from the API, the following request were made:")
        print(request)
        print("Error: {}".format(error))


def main():
    """
    Get files, upload them and add structured data
    """

    site = pywikibot.Site("commons", "commons")
    site.login()
    site.get_tokens("csrf")  # preload csrf token
    upload_dir = pathlib.Path("uploaded")

    config = configparser.ConfigParser()
    config.read("config.ini")

    for jpg in pathlib.Path().glob("*.jpg"):
        if jpg.name not in config:
            print(f"Photo {jpg} not in config file")
            continue
        license_info = config[jpg.name]["license"]
        assert license_info in ("cc-by-sa-4.0", "self|cc-by-sa-4.0")
        filename = get_filename(config[jpg.name])
        page = pywikibot.Page(site, title=page_name(filename))
        if page.exists():
            print(f"Page {page_name(filename)} exists already")
            continue
        print(f"Uploading {jpg} as {filename}")
        exif_info = add_exif(jpg, filename, config[jpg.name])
        meta = get_info(config[jpg.name], exif_info)
        upload(site, filename, meta)
        add_structured_data(site, filename, meta)
        pathlib.Path(filename).unlink()
        upload_dir.mkdir(exist_ok=True)
        jpg.replace(upload_dir / jpg)
        delay = random.randint(60, 3 * 60)
        print(f"Sleeping for {delay} seconds")
        time.sleep(delay)


if __name__ == "__main__":
    main()
